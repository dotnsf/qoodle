<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="UTF-8"/>
<title><%= room %> - <%= id %></title>
<script type="text/javascript" src="//code.jquery.com/jquery-2.2.4.min.js"></script>
<link href="//maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css" rel="stylesheet"/>
<script src="//maxcdn.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>
<link href="//cdn.datatables.net/1.10.22/css/dataTables.bootstrap4.min.css rel="stylesheet"/>
<script src="//cdn.datatables.net/1.10.22/js/jquery.dataTables.min.js"></script>
<script src="/cvi_busy_lib.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="/qrcode.min.js"></script>

<link rel="stylesheet" href="//unpkg.com/leaflet@1.3.1/dist/leaflet.css"/>
<script src="//unpkg.com/leaflet@1.3.1/dist/leaflet.js"></script>

<link href="/colorbox.css" rel="stylesheet"/>
<script src="/jquery.colorbox-min.js"></script>
<script src="/common.js"></script>

<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link rel="shortcut icon" href="/icon.png" type="image/png"/>
<link rel="icon" href="/icon.png" type="image/png"/>
<link rel="apple-touch-icon" href="/icon.png"/>

<meta name="viewport" content="width=device-width,initial-scale=1"/>
<meta name="apple-mobile-web-app-capable" content="yes"/>
<meta name="apple-mobile-web-app-status-bar-style" content="black"/>
<meta name="apple-mobile-web-app-title" content="Qdle"/>

<style type="text/css">
html, body{
  text-align: center;
  background-color: #fafafa;
  font-size: 20px;
  color: #333;
}
.mycanvas{
  border: 1px solid #333;
}
.card-columns{
  column-count: 1;
}
.card-group .card{
  max-width: calc(100%);
}
#open16_table{
  background-repeat: no-repeat;
  background-size: 100% 100%
}
.num_panel{
  width: 15%;
  height: 100px;
  color: #fff;
  background-color: #006;
  border-style: solid;
  border-width: 2px;
  text-align: center;
  opacity: 1
}
#my-navbar{
  color: #f00;
}
#quiz_answer{
  color: #f00;
}
.rank_color_1{
  background-color: #DBB400;
}
.rank_color_2{
  background-color: #BDC3C9;
}
.rank_color_3{
  background-color: #9F7A46;
}
.open{
  background: #ffc;
  cursor: pointer;
  padding: 5px;
}
</style>
</head>
<body>

<nav class="navbar fixed-top">
  <div class="navbar-header">
  </div>
  <div id="my-navbar">
  </div>
</nav>

<canvas id="qrcode"></canvas>

<div class="container">
  <p class="open" id="subject"><%= __('quizset.quizlist') %></p>
  <div id="slideBox">
    <table class="table table-bordered" id="quizlist">
      <thead>
        <tr>
          <th>#</th><th><%= __('quizset.list.col1.label') %></th><th><%= __('quizset.list.col2.label') %></th><th><%= __('quizset.list.col3.label') %></th><th><%= __('quizset.list.col5.label') %></th>
        </tr>
      </thead>
      <tbody id="quizlist_tbody">
      </tbody>
    </table>
  </div>
</div>

<div class="container p-3" id="quiz_body">
  <ul class="nav nav-tabs">
    <li class="nav-item"><a href="#tab-pane-quiz" data-toggle="tab" class="nav-link active"><%= __('quizset.tab.quiz.label') %></a></li>
    <li class="nav-item"><a href="#tab-pane-answers" data-toggle="tab" class="nav-link"><%= __('quizset.tab.answers.label') %></a></li>
    <li class="nav-item"><a href="#tab-pane-rank" data-toggle="tab" class="nav-link"><%= __('quizset.tab.rank.label') %></a></li>
  </ul>
  <div class="tab-content">
    <div id="tab-pane-quiz" class="tab-pane active">
      <div id="quiz_div">
      </div>
      <div id="quiz_answer"></div>
      <button id="quizFinishBtn" class="btn btn-primary" onClick="quizFinish();"><%= __('quizset.quizfinish.button') %></button>
    </div>
    <div id="tab-pane-answers" class="tab-pane">
      <div id="card-groups">
        <!--
        <div class="card-group" id="cards-1">
        </div>
        -->
      </div>
    </div>
    <div id="tab-pane-rank" class="tab-pane">
      <table id="rank-table" class="table table-bordered">
      </div>
    </div>
  </div>
</div>

<div style="display:none;">
  <div id="box_content">
  </div>
</div>

<script>
var uuid = getUserId();
var socketio = null;
var socket_ids = [];

var base_url = location.origin + '/';
console.log( 'base_url = ' + base_url );

var cards = [];    //. カード
var imgs = {};     //. 画像データ

var quiz_point = 0;
var image_category = -1;
var image_point = 0;
var image_blur = -1;
var blur_ratio = 1;
var image_16_open = 0;
var _quiz_id = null;
var _quiz_comment = '';

var on_quiz = true;  //. #17  //. 最初は自由に描けるようにする

var answers = {};
var names = {};

var zoomlevel = 0;  //. #22

var points = {};  //. #23
var current_point = 0;

var countdown = -1;  //. #51
var countdown_ = null;

$(function(){
  socketio = io.connect();

  QRCode.toCanvas( document.getElementById( 'qrcode' ), base_url + 'client?room=<%= room %>', function( err ){
    if( err ){ console.log( err ); }
  });

  init();

  if( uuid ){ //. #50
    $.ajax({
      type: 'GET',
      url: '/dbapi/quizset/<%= id %>?include_docs=1',
      success: function( result ){
        if( result && result.status && result.body && result.body.quizs ){
          $('#subject').html( result.body.subject );
          var cats = ['<%= __("admin.category.0") %>','<%= __("admin.category.1") %>','<%= __("admin.category.2") %>','<%= __("admin.category.3") %>','<%= __("admin.category.4") %>','<%= __("admin.category.5") %>'];
          for( var i = 0; i < result.body.quizs.length; i ++ ){
            var quiz = result.body.quizs[i];
            var img = '';
            if( quiz.img_url ){
              if( quiz.category < 4 ){
                //. 画像
                img = '<img src="' + quiz.img_url + '" width="100"/>';
              }else if( quiz.category == 4 ){
                //. サウンド
                img = '<img src="//2.bp.blogspot.com/-I_cufIa0hF8/WxvJ4aLXdkI/AAAAAAABMk0/owKqed9VWX4hw36JShIJW3kyY6IUTV91QCLcBGAs/s180/file_icon_mark_music.png" width="100"/>';
              }else if( quiz.category == 5 ){
                //. 動画
                img = '<img src="//3.bp.blogspot.com/-wb-AKkcqcr0/WxvJ5MDTWrI/AAAAAAABMlA/ohMFYIDhi5UJDL3U2Ww40xMAAS0VJHIRgCLcBGAs/s180/file_icon_mark_video.png" width="100"/>';
              }
            }
            var a = '<a href="#quiz_body" onClick="selectQuiz(\'' + quiz._id + '\', ' + quiz.category + ', ' + quiz.point + ', \'' + quiz.comment + '\');">' + quiz.body + '</a>';
            var tr = '<tr id="quiz_' + quiz._id + '">'
              + '<td><input type="checkbox" id="quiz_check_' + quiz._id + '" disabled="true"/>' + ( i + 1 ) + '</td>'
              + '<td id="quizcat_' + quiz._id + '">' + cats[quiz.category] + '</td>'
              + '<td id="quizimg_' + quiz._id + '">' + img + '</td>'
              + '<td id="quizbody_' + quiz._id + '">' + a + '</td>'
              //+ '<td id="quizcomment_' + quiz_id + '">' + quiz.comment + '</td>'
              + '<td id="quizpoint_' + quiz._id + '">' + quiz.point + '</td>'
              + '</tr>';
            $('#quizlist_tbody').append( tr );
  
            //. 通常問題以外は画像はそのまま表示したくない・・・
            if( 0 < quiz.category && quiz.category < 4 ){
              b = 10;  //. ぼかして表示
              var t = $('#quizimg_'+quiz._id)[0];
              t.style['-ms-filter'] = 'blur(' + b + 'px)';
              t.style['filter'] = 'blur(' + b + 'px)';
            }
          }

          $('#quizlist').DataTable({
            language: { url: "//cdn.datatables.net/plug-ins/1.10.16/i18n/Japanese.json" }
          })
        }
      },
      error: function( e0, e1, e2 ){
        console.log( e0, e1, e2 );
      }
    });
  }

  var msg = {
    uuid: uuid,
    room: '<%= room %>',
    timestamp: ( new Date() ).getTime()
  };
  socketio.json.emit( 'init_admin', msg );

  socketio.on( 'init_admin_view', function( msg ){
    console.log( 'init_admin_view', msg );
  });

  socketio.on( 'init_client_view', function( msg ){
    var socket_id = msg.uuid; //msg.socket_id;
    if( socket_ids.indexOf( socket_id ) > -1 ){
    }else{
      socket_ids.push( socket_id );
      //$('#debug_ul').append( '<li id="socket_' + socket_id + '">' + socket_id + '</li>' );
      console.log( socket_ids );

      var color = generateColor( msg.name );

      $('#card-groups').html( '' );
      $.colorbox.remove();

      //. カード追加
      var card = '<div id="card_' + socket_id + '" class="card border-' + color + '" style="cursor: pointer;">'
        + '<div class="card-body text-' + color + '">'
        //+ '<h4 class="card-title"><a id="a_' + socket_id + '" href="#" class="btn btn-xs btn-' + color + '" onClick="removeCard(\'card_' + socket_id + '\');">&times;</a>' + msg.name + '</h4>'
        + '<h4 class="card-title"><a id="a_' + socket_id + '" class="my_a btn btn-xs btn-' + color + '" onClick="selectSocket(\'' + socket_id + '\');">&times;</a>' + msg.name + '</h4>'
        + '</div>'
        + '<a href="#box_content" id="box_content_' + socket_id + '" title="' + msg.name + '">'
        + '<div class="my-card-img" id="xxxx_' + socket_id + '">'   //. #29
        + '<img class="card-img-bottom" id="image_' + socket_id + '" alt="(image of ' + msg.name + ')" ts="' + msg.timestamp + '"/>'
        + '</div>'
        + '</a>'
        + '</div>';
      cards.push( card );

      //. カードグループを必要数だけ追加
      appendCardGroups( '#card-groups', cards.length );
    }

    //. 表示名を更新
    names[socket_id] = msg.name;
  });

  socketio.on( 'image_client_view', function( msg ){
    var socket_id = msg.uuid; //msg.socket_id;
    if( on_quiz && socket_ids.indexOf( socket_id ) > -1 ){  //. #34
      var ts = $('#image_'+socket_id).attr( 'ts' );
      ts = parseInt( ts );

      if( msg.timestamp > ts ){
        $('#image_'+socket_id).prop( 'src', msg.image_src );
        $('#image_'+socket_id).prop( 'title', msg.comment );
        $('#image_'+socket_id).prop( 'ts', msg.timestamp );

        //. #23
        points[socket_id] = current_point;

        //. 再描画用に記録
        var img = {
          src: msg.image_src,
          title: msg.comment,
          ts: msg.timestamp
        };
        imgs[socket_id] = img;

        var zoom_socket_id = $('#zoom_image').attr( 'socket_id' );
        if( zoom_socket_id && zoom_socket_id == socket_id ){
          $('#zoom_image').prop( 'src', msg.image_src );
        }
      }
    }
  });
});

function init(){
  //. リサイズ時
  //$(window).on( 'load resize', function(){
    resized();
  //});
  $(window).on( 'load resize', function(){
    var height = $('.navbar').height();
    $('body').css( 'padding-top', height );
  });

  $('.open').click( function(){
    $('#slideBox').slideToggle( 'slow' );
  });
}

function resized(){
  var browserWidth = window.innerWidth;
  var browserHeight = window.innerHeight;

  //socketio.emit( 'init_admin', { room: '<%= room %>', width: browserWidth, height: browserHeight } );
}

function selectSocket( socket_id ){
  //. 送信前は採点できなくする
  if( !on_quiz ){  //. #17
    var correct = $('#card_'+socket_id).hasClass( 'border-success' );

    if( !answers[_quiz_id] ){
      answers[_quiz_id] = {};
    }
    var answer = { point: image_point, correct: !correct };
    if( !correct && points[socket_id] ){
      answer.point = points[socket_id];  //. #23
    }
    answers[_quiz_id][socket_id] = answer;

    //. このタイミングでDBに記録する
    saveAnswer( socket_id, answer );

    //. このタイミングでランキング表を更新する
    updateRanking();

    //. もう一度選択したらキャンセルできるようにしたい
    if( correct ){
      $('#card_'+socket_id).removeClass( 'border-success');
      $('#a_'+socket_id).removeClass( 'btn-success');
    }else{
      $('#card_'+socket_id).addClass( 'border-success');
      $('#a_'+socket_id).addClass( 'btn-success');
    }
  }

  return false;
}

function removeCard( card_id ){
  $('#'+card_id).css( 'display', 'none' );

  //. card_id = 'card_XXXXXX';
  var socket_id = card_id.substr( 6 );
  if( imgs[socket_id] ){
    delete imgs[socket_id];
  }

  var b = true;
  for( var i = 0; i < cards.length && b; i ++ ){
    var card = cards[i];
    if( card.indexOf( 'card_' + socket_id ) > -1 && card.indexOf( 'image_' + socket_id ) > -1 ){
      cards.splice( i, 1 );
      b = false;
    }
  }
}

function zoomImage( socket_id ){
  if( socket_id ){
    $('#box_content').html( '<img id="zoom_image" socket_id="' + socket_id + '" src="' + $('#image_'+socket_id).prop( 'src' ) + '"/>' );
  }
}


//. num 個の要素をなるべく正方形に近い表形式の card-group 化する
function appendCardGroups( cardgroups_selector, num ){
  //. 近づける正方形の一辺の長さ
  var m = Math.ceil( Math.sqrt( num ) );
  //. m 個の card-group が必要
  for( var i = 0; i < m; i ++ ){
    $(cardgroups_selector).append( '<div class="card-group" id="cards-' + i + '">' );
  }
  //. ( m * m ) の正方形の中に表示する
  for( var i = 0; i < num; i ++ ){
    var card = cards[i];
    var row = Math.floor( i / m );
    $('#cards-'+row).append( card );
  }

  //. クラスでまとめて ColorBox の指定 (#29)
  $('.my-card-img').colorbox({ href: '#box_content', inline: true, transition: 'none', width: "90%", innerHeight: "90%", onOpen: function(){ var socket_id = $(this).prop( 'id' ).substr( 5 ); zoomImage( socket_id ); }, onClosed: function(){ $('#box_content').html(''); } });

  if( num % m ){
    var row = Math.floor( num / m );
    for( var i = num; i % m > 0; i ++ ){
      var dummycard = '<div class="card"></div>';
      $('#cards-'+row).append( dummycard );
    }
  }

  //. 画像再描画
  Object.keys( imgs ).forEach( function( socket_id ){
    var img = imgs[socket_id];

    $('#image_'+socket_id).prop( 'src', img.src );
    $('#image_'+socket_id).prop( 'title', img.title );
    $('#image_'+socket_id).prop( 'ts', img.ts );
  });
}

function selectQuiz( quiz_id, quiz_category, quiz_point, quiz_comment ){
  on_quiz = true;
  activeTab( 'tab-pane-quiz' );
  _quiz_id = quiz_id;
  image_category = quiz_category;
  image_point = quiz_point;
  current_point = quiz_point;

  countdown = 30;  //. #51 
  if( quiz_category == 0 ){
    $('#quizFinishBtn').html( countdown );
  }else{
    $('#quizFinishBtn').html( "<%= __('quizset.quizfinish.button') %>" );
  }

  if( !answers[quiz_id] ){ answers[quiz_id] = {}; }

  $('.card').removeClass( 'border-success' );
  $('.my_a').removeClass( 'btn-success' );

  $('#quiz_answer').css( 'display', 'none' );
  $('#quiz_answer').html( quiz_comment );
  $('#quizFinishBtn').css( 'display', 'inline' );

  //. 問題を選択したらクイズリストを閉じる
  $('#subject').click();

  setTimeout( function(){
    $.ajax({
      type: 'GET',
      url: '/dbapi/quiz/' + quiz_id,
      success: function( result ){
        if( result && result.status && result.body ){
          var html = '<h3>' + result.body.body + '</h3>';
          if( result.body.img_url ){
            if( result.body.category == 1 ){
              html += '<div id="demoMap"></div>';
            }else if( result.body.category == 0 || result.body.category == 3 ){
              html += '<div><img id="q_image" src="' + result.body.img_url + '" height="90%"/></div>';
            }else if( result.body.category == 2 ){
              html += '<div><table id="open16_table" class="table" style="background-image: url(\'' + result.body.img_url + '\');"></table></div>';
            }else if( result.body.category == 4 ){
              html += '<div><audio src="' + result.body.img_url + '" controls></audio></div>';
            }else if( result.body.category == 5 ){
              if( result.body.img_url.toLowerCase().endsWith( '.mp4' ) ){
                html += '<div><video width="560" preloed="true" src="' + result.body.img_url + '" controls></video></div>';
              }else if( result.body.img_url.toLowerCase().indexOf( 'youtube' ) > -1 ){
                var tmp1 = result.body.img_url.split( '?' );
                var v = '';
                if( tmp1.length > 1 ){
                  var tmp2 = tmp1[1].split( '&' );
                  tmp2.forEach( function( tmp3 ){
                    var tmp4 = tmp3.split( '=' );
                    if( tmp4.length > 1 && tmp4[0] == 'v' ){
                      v = tmp4[1];
                    }
                  });
                }
                if( v ){
                  html += '<div>'
                    + '<iframe width="560" height="315" src="https://www.youtube.com/embed/' + v + '" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>'
                    + '</div>';
                }
              }
            }
          }

          switch( result.body.category ){
          case 0:
            //. 一般クイズ
            countdown_ = setInterval( drawCountdown, 1000 );
            break;
          case 1:
            //. ズームアウト出題
            break;
          case 2:
            //. 16分割クイズ
            break;
          case 3:
            //. ぼかしクイズ
            html += '<br/>'
              + '<input id="rng" type="range" value="9" min="0" max="9" step="1" onInput="changeBlur();"/> <span id="range_value">10</span>';
            break;
          }
          
          //. #48
          if( uuid && uuid != result.body.user_id ){
            html += '<div style="text-align: right;">'
              + '<%=  __("quizset.quiz.generatedby.0") %><b>' + result.body.user_name + '</b><%= __("quizset.quiz.generatedby.1") %>'
              + '</div>';
          }

          html += '</div>';

          $('#quiz_div').html( html );
          $('#my-navbar').html('');
          if( result.body.category == 3 ){
            current_point = 10;
            var e = document.getElementById( 'q_image' );
            var iid = setInterval( function(){
              if( e.complete ){
                blur_ratio = Math.floor( e.naturalWidth / 100 );
                clearInterval( iid );
                changeBlur();
              }
            }, 10 );
          }else if( result.body.category == 2 ){
            current_point = 16;
            image_16_open = 0;
            for( var i = 0; i < 4; i ++ ){
              var tr = '<tr id="board_row_' + i + '">';
              for( var j = 0; j < 4; j ++ ){
                var num = ( i * 4 + j + 1 );
                var td = '<td id="panel_' + num + '" class="num_panel" onClick="open16_click(' + num + ');">' + num + '</td>';
                tr += td;
              }
              tr += '</tr>';
              $('#open16_table').append( tr );
            }
          }else if( result.body.category == 1 ){
            current_point = 10;
            //. 空の地図を OpenStreetMap データで表示
            var map = L.map('demoMap', { dragging: true, zoomControl: true, minZoom: 0, maxZoom: 5, crs: L.CRS.Simple, preferCanvas: true } );

            //. 画像パス
            var imgpath = result.body.img_url;
            var element = new Image();
            element.onload = function(){
              //. 表示する画像のパスとサイズ
              var image = {
                url: imgpath,
                width: element.naturalWidth,
                height: element.naturalHeight
              };

              //. 画像領域を地図に設定
              var imageBounds = L.latLngBounds([
                map.unproject( [ 0, image.height ] ),
                map.unproject( [ image.width, 0 ] )
              ]);
              map.fitBounds( imageBounds );
              map.setMaxBounds( imageBounds.pad( 0.5 ) );

              zoomlevel = 5;
              map.on( 'zoom', function( e ){
                zoomlevel = map.getZoom();
                current_point = zoomlevel * 2;
              });
              map.setZoom( zoomlevel );

              //. 画像をオーバーレイで設定
              setTimeout( function(){
                L.imageOverlay( image.url, imageBounds ).addTo( map );
                $('#demoMap').css( 'height', image.height + 'px' );
              }, 100 );
            }
            element.src = imgpath;
          }
        }
      },
      error: function( e0, e1, e2 ){
        console.log( e0, e1, e2 );
      }
    });

  }, 200 );

  $('#quiz_check_'+quiz_id).attr( 'checked', true ); //. #21
  points = {};  //. #23

  return false;
}

function drawCountdown(){
  if( countdown > 0 ){
    countdown --;
    $('#quizFinishBtn').html( countdown );
  }else{
    clearInterval( countdown_ );
    countdown_ = null;
    $('#quizFinishBtn').click();
  }
}

function quizFinish(){
  on_quiz = false;
  if( countdown_ ){
    clearInterval( countdown_ );
    countdown_ = null;
  }

  $('#quiz_answer').css( 'display', 'inline' );
  $('#quizFinishBtn').css( 'display', 'none' );
}

function recordAnswers(){
  var obj = getBusyOverlay( 'viewport', {color:'black', opacity:0.5, text:'<%= __("quizset.recordanswers.recording") %>', style:'text-decoration:blink; font-weight:bold; font-size:12px; color:white;' } );
  var data = {
    quizset_id: '<%= id %>',
    answers: answers
  };
  $.ajax({
    type: 'POST',
    url: '/dbapi/answer_bulk',
    data: data,
    success: function( result ){
      obj.remove();
      if( result && result.status && result.body ){
      }
    },
    error: function( e0, e1, e2 ){
      obj.remove();
      console.log( e0, e1, e2 );
    }
  });
}

function changeBlur(){
  var b = parseInt( $('#rng').val() );
  current_point = b + 1;
  $('#range_value').html( ( b + 1 ) );
  var t = $('#q_image')[0];
  t.style['-ms-filter'] = 'blur(' + ( b * blur_ratio ) + 'px)';
  t.style['filter'] = 'blur(' + ( b * blur_ratio ) + 'px)';
}

function open16_click( num ){
  var o = $('#panel_'+num).css( 'opacity' );
  if( o == '1' ){
    $('#panel_'+num).css( 'border-width', '1px' );
    $('#panel_'+num).css( 'opacity', '0' );

    image_16_open ++;
    current_point --;
  }
}

//. for #2
function activeTab( tabid ){
  $('.nav-tabs a[href="#' + tabid + '"]').tab( 'show' );
}

function enableTab( tabid ){
  $('.nav-tabs a[href="#' + tabid + '"]').attr( 'data-toggle', 'tab' );
}

function disableTab( tabid ){
  $('.nav-tabs a[href="#' + tabid + '"]').removeAttr( 'data-toggle' );
}

var ids_by_quiz_id = {};
function saveAnswer( uuid, answer ){
  var quizset_id = '<%= id %>';

  //. データがなかったら作成、あったら更新
  var isNew = true;
  if( ids_by_quiz_id[_quiz_id] ){
    if( ids_by_quiz_id[_quiz_id][uuid] ){
      isNew = false;
    }
  }else{
    ids_by_quiz_id[_quiz_id] = {};
  }

  if( isNew ){
    recordAnswer( uuid, answer );
  }else{
    var _id = ids_by_quiz_id[_quiz_id][uuid];
    updateAnswer( _id, uuid, answer );
  }
}

function recordAnswer( uuid, answer ){
  var data = {
    quizset_id: '<%= id %>',
    quiz_id: _quiz_id,
    point: ( answer.correct ? answer.point : 0 ),
    user_id: uuid,
    user_name: uuid
  };
  $.ajax({
    type: 'POST',
    url: '/dbapi/answer',
    data: data,
    success: function( result ){
      if( result && result.status && result.body ){
        ids_by_quiz_id[_quiz_id][uuid] = result.body.id;
      }
    },
    error: function( e0, e1, e2 ){
      console.log( e0, e1, e2 );
    }
  });
}
function updateAnswer( _id, uuid, answer ){
  var data = {
    quizset_id: '<%= id %>',
    quiz_id: _quiz_id,
    point: ( answer.correct ? answer.point : 0 ),
    user_id: uuid,
    user_name: uuid
  };
  $.ajax({
    type: 'PUT',
    url: '/dbapi/answer/' + _id,
    contentType: 'application/json',
    dataType: 'json',
    data: JSON.stringify( data ),
    success: function( result ){
      if( result && result.status && result.body ){
        ids_by_quiz_id[_quiz_id][uuid] = result.body.id;
      }
    },
    error: function( e0, e1, e2 ){
      console.log( e0, e1, e2 );
    }
  });
}

function updateRanking(){
  //. 全参加者 ID と全問題 ID を確認
  var uuids = [];
  var quizs = [];
  Object.keys( answers ).forEach( function( quiz_id_ ){
    quizs.push( quiz_id_ );
    var answersObj = answers[quiz_id_];
    Object.keys( answersObj ).forEach( function( uuid_ ){
      //var answer = answersObj[uuid_];
      if( uuids.indexOf(uuid_) == -1 ){
        uuids.push( uuid_ );
      }
    });
  });

  //. 参加者ごとに各問題への正誤を確認し、総得点をカウントする
  var points = {};
  var point_by_uuid = {};
  uuids.forEach( function( uuid_ ){
    points[uuid_] = 0;
    point_by_uuid[uuid_] = {};
  });
  Object.keys( answers ).forEach( function( quiz_id_ ){
    var answersObj = answers[quiz_id_];
    Object.keys( answersObj ).forEach( function( uuid_ ){
      var answer = answersObj[uuid_];  //. { point: 5, correct: true }
      if( answer ){
        if( answer.correct ){
          point_by_uuid[uuid_][quiz_id_] = answer.point;
          points[uuid_] += answer.point;
        }else{
          point_by_uuid[uuid_][quiz_id_] = 0;
        }
      }else{
        point_by_uuid[uuid_][quiz_id_] = '';
      }
    });
  });

  //. 参加者ごとのランキングを集計
  var rank_by_uuid = {};
  uuids.forEach( function( uuid_ ){
    rank_by_uuid[uuid_] = 1;
  });
  for( var i = 0; i < uuids.length; i ++ ){
    for( var j = 0; j < uuids.length; j ++ ){
      if( i != j && points[uuids[i]] < points[uuids[j]] ){
        rank_by_uuid[uuids[i]] ++;
      }
    }
  }

  //. (#10)ランキング順にソート
  //. uuids[] 配列を rank_by_uuid[uuids[]] が昇順になるようにソートする
  var tmp = [];
  uuids.forEach( function( uuid_ ){
    tmp.push( { uuid: uuid_, rank: rank_by_uuid[uuid_] } );
  });
  tmp.sort( sortByRank );

  uuids = [];
  tmp.forEach( function( t ){
    uuids.push( t.uuid );
  });

  //. thead 作成
  var thead = '<thead><tr>';
  thead += '<th>Ranking</th>';
  thead += '<th>Name</th>';
  for( var i = 0; i < quizs.length; i ++ ){
    var quiz_id_ = quizs[i];
    //thead += '<th>' + quiz_id_ + '</th>';
    thead += '<th>' + ( i + 1 ) + '</th>';
  }
  thead += '<th>Sum</th>';
  thead += '</tr></thead><tbody id="ranktable-body"></tbody>';
  $('#rank-table').html( thead );

  //. 参加者ごとに各問題ごとの得点を表形式で表記
  uuids.forEach( function( uuid_ ){
    var tr = '<tr>';
    tr += '<td class="rank_color_' + rank_by_uuid[uuid_] + '">' + rank_by_uuid[uuid_] + '</td>';
    tr += '<td>' + ( names[uuid_] ? names[uuid_] : uuid_ ) + '</td>';   //. 名前にしたい
    quizs.forEach( function( quiz_id_ ){
      tr += '<td>' + ( point_by_uuid[uuid_][quiz_id_] ? point_by_uuid[uuid_][quiz_id_] : 0 ) + '</td>';
    });
    tr += '<td>' + points[uuid_] + '</td></tr>';
    $('#ranktable-body').append( tr );
  });
}

function sortByRank( a, b ){
  var r = 0;
  if( a.rank < b.rank ){
    r = -1;
  }else if( a.rank > b.rank ){
    r = 1;
  }

  return r;
}
</script>
</body>
</html>
